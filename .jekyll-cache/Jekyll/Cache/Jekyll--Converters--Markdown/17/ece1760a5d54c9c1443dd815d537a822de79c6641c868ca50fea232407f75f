I"v<p>Today we are going to look at Problem 40 from the book 50 Challenging Problems in Probability by Frederick Mosteller. However, instead of solving it analytically, we are going to use the Monte Carlo method (random sampling) to solve it.</p>

<p>The problem goes like this:</p>

<p><em>Shuffle an ordinary deck of 52 playing cards containing four aces.
Then turn up cards from the top until the first ace appears. On the average, how many cards are required to produce the first ace?</em></p>

<p>If you are dumbfounded, worry not, because so was I when I first saw this problem. It may seem like there is no expedient mathamatical method that would lead us to the answer. So what do we do? This is where Monte Carlo method comes in. You probably know that if you were to toss a coin, there would be a 50-50 chance of it being heads or tails. Now to verify that fact, what you would do, assuming you have a lot of free time, would be to simply toss it many times, and see what percentage of the total tosses ended up heads or tails. It would be unlikely for the percentages to be exactly 50% tails and 50% heads, but after tossing the coin many times, they would undoubtedly be very close to 50-50. The above is a case of using Monte Carlo methods to evaluate a problem deterministic in nature via stochastic sampling.</p>

<p>How can we apply Monte Carlo methods here? Obviously cannot shuffle and draw cards in any reasonable amount of time in real life to obtain sufficient sampling. Luckily, we have the power of modern computers + programming to help us. In other words, we are going to simulate the situation using computers. It is easy to get sufficient sampling with computers, since computers are quite good at doing repetitive tasks. Here we will use python and numpy (a numerical package for python) to build our simulation.</p>

<p>First, let us make our deck as an object in python:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="k">class</span> <span class="nc">deck</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">deck_size</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">deck_size</span><span class="o">=</span><span class="n">deck_size</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">cards</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">deck_size</span><span class="p">,</span><span class="n">dtype</span><span class="o">=</span><span class="s">'bool'</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">cards</span><span class="p">[:</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="bp">True</span>
    <span class="k">def</span> <span class="nf">shuffle_deck</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cards</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">draw_until_ace</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">ace_draw</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">deck_size</span><span class="p">):</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">cards</span><span class="p">[</span><span class="n">ace_draw</span><span class="p">]:</span>
                <span class="k">break</span>
        <span class="k">return</span> <span class="n">ace_draw</span><span class="o">+</span><span class="mi">1</span>
</code></pre></div></div>
<p>It is a pretty straightforward object with two attributes and two methods. <em>deck_size</em> is just the size of the deck, in our case, 52. Since all we are only concerned with drawing aces, we can consider every single card of the deck as ace or not ace. Therefore, <em>cards</em> is just a vector of 52 binaries, 4 of which are <em>True</em> (it does not matter which four to begin with, since the deck will be shuffled), because we have 4 aces in our deck. <em>shuffle_deck</em> allows us to shuffle the deck using <em>np.random.shuffle</em>. Now we have a deck that can be shuffled much faster than any human can in real life.</p>
:ET